{
	"kadenze-machine-learning-for-musicians-and-artists-3768": {
		"overview": "Have you ever wanted to build a new musical instrument that responded to your gestures by making sound? Or create live visuals to accompany a dancer? Or create an interactive art installation that reacts to the movements or actions of an audience? If so, take this course!\nIn this course, students will learn fundamental machine learning techniques that can be used to make sense of human gesture, musical audio, and other real-time data. The focus will be on learning about algorithms, software tools, and best practices that can be immediately employed in creating new real-time systems in the arts.\nSpecific topics of discussion include:\n\u2022 What is machine learning?\n\u2022 Common types of machine learning for making sense of human actions and sensor data, with a focus on classification, regression, and segmentation\n\u2022 The \u201cmachine learning pipeline\u201d: understanding how signals, features, algorithms, and models fit together, and how to select and configure each part of this pipeline to get good analysis results\n\u2022 Off-the-shelf tools for machine learning (e.g., Wekinator, Weka, GestureFollower)",
		"name": "Machine Learning for Musicians and Artists",
		"school": "Goldsmiths, University of London",
		"provider": "Kadenze",
		"link": "https://www.kadenze.com/courses/machine-learning-for-musicians-and-artists/info?utm_campaign=course_catalog&utm_content=course%3D99&utm_medium=referral&utm_source=classcentral",
		"categories": "Found in Machine Learning, Artificial Intelligence",
		"subject": "cs",
		"sub-categories": "Machine Learning, Artificial Intelligence",
		"rating": "",
		"syllabus": "Session 1: Introduction \nWhat is machine learning? And what is it good for?\nSession 2: Classification \nThis session will cover fundamentals, how to use Wekinator for classification, and an introduction to classification algorithms: kNN, Decision trees, AdaBoost, SVM.\nSession 3: Regression \nIn this session we will discuss the fundamentals of regression, using Wekinator for regression, and neural networks for more complex types of models.\nSession 4: Dynamic Time Warping \nIn this session you will learn what dynamic time warping is and what it's useful for, as well as how to use Wekinator for dynamic time warping.\nSession 5: Sensors & Features Part I: Basic Signal Processing For Learning \nThis session will cover retrieving data from devices: Streaming data vs events; Smoothing noisy signals; Throttling, downsampling, and upsampling; First and second order differences; Buffering & chunking.\nSession 6: Sensors & Features Part II: Intro To A Few Fun/Popular Types Of Sensors & Sensing Systems \nThis session will introduce Kinect, Leap, and basic physical computing sensors such as accelerometers, gyros, FSRs, ultrasonic distance sensors, and photosensors.",
		"teacher": "Rebecca Fiebrink",
		"details": {
			"PROVIDER": "Kadenze",
			"COST": "Free Online Course",
			"SESSION": "Self Paced",
			"LANGUAGE": "English",
			"CERTIFICATE": "Paid Certificate Available",
			"START DATE": [
				"Self paced",
				"Self paced",
				"3rd Feb, 2016",
				"13th Jul, 2016",
				"3rd Feb, 2016",
				"13th Jul, 2016"
			],
			"DURATION": "7 weeks long"
		}
	},
	"algorithms-divide-conquer-374": {
		"overview": "The primary topics in this part of the specialization are: asymptotic (\"Big-oh\") notation, sorting and searching, divide and conquer (master method, integer and matrix multiplication, closest pair), and randomized algorithms (QuickSort, contraction algorithm for min cuts).",
		"name": "Divide and Conquer, Sorting and Searching, and Randomized Algorithms",
		"school": "Stanford University",
		"provider": "Coursera",
		"link": "http://click.linksynergy.com/fs-bin/click?id=SAyYsTvLiGQ&subid=&offerid=451430.1&type=10&tmpid=18061&RD_PARM1=https%3A%2F%2Fwww.coursera.org%2Flearn%2Falgorithms-divide-conquer&u1=gtc_direct",
		"categories": "Found in Algorithms and Data Structures",
		"subject": "cs",
		"sub-categories": "Algorithms and Data Structures",
		"rating": "",
		"syllabus": "Week 1\n-Introduction; \"big-oh\" notation and asymptotic analysis.\n\nWeek 2\n-Divide-and-conquer basics; the master method for analyzing divide and conquer algorithms.\n\nWeek 3\n-The QuickSort algorithm and its analysis; probability review.\n\nWeek 4\n-\nLinear-time selection; graphs, cuts, and the contraction algorithm.",
		"teacher": "Tim Roughgarden",
		"details": {
			"PROVIDER": "Coursera",
			"COST": "Free Online Course (Audit)",
			"SESSION": "In progress",
			"LANGUAGE": "English",
			"CERTIFICATE": "Paid Certificate Available",
			"START DATE": [
				"21st Oct, 2019",
				"7th Oct, 2019",
				"23rd Sep, 2019",
				"9th Sep, 2019",
				"26th Aug, 2019",
				"12th Aug, 2019",
				"29th Jul, 2019",
				"15th Jul, 2019",
				"1st Jul, 2019",
				"17th Jun, 2019",
				"3rd Jun, 2019",
				"20th May, 2019",
				"6th May, 2019",
				"22nd Apr, 2019",
				"8th Apr, 2019",
				"25th Mar, 2019",
				"11th Mar, 2019",
				"25th Feb, 2019",
				"11th Feb, 2019",
				"28th Jan, 2019",
				"14th Jan, 2019",
				"31st Dec, 2018",
				"17th Dec, 2018",
				"3rd Dec, 2018",
				"19th Nov, 2018",
				"5th Nov, 2018",
				"22nd Oct, 2018",
				"8th Oct, 2018",
				"24th Sep, 2018",
				"10th Sep, 2018",
				"27th Aug, 2018",
				"13th Aug, 2018",
				"30th Jul, 2018",
				"16th Jul, 2018",
				"2nd Jul, 2018",
				"18th Jun, 2018",
				"4th Jun, 2018",
				"21st May, 2018",
				"7th May, 2018",
				"23rd Apr, 2018",
				"9th Apr, 2018",
				"26th Mar, 2018",
				"12th Mar, 2018",
				"26th Feb, 2018",
				"12th Feb, 2018",
				"29th Jan, 2018",
				"15th Jan, 2018",
				"1st Jan, 2018",
				"18th Dec, 2017",
				"4th Dec, 2017",
				"20th Nov, 2017",
				"6th Nov, 2017",
				"23rd Oct, 2017",
				"9th Oct, 2017",
				"25th Sep, 2017",
				"11th Sep, 2017",
				"28th Aug, 2017",
				"14th Aug, 2017",
				"31st Jul, 2017",
				"17th Jul, 2017",
				"3rd Jul, 2017",
				"19th Jun, 2017",
				"5th Jun, 2017",
				"22nd May, 2017",
				"8th May, 2017",
				"24th Apr, 2017",
				"10th Apr, 2017",
				"27th Mar, 2017",
				"13th Mar, 2017",
				"27th Feb, 2017",
				"13th Feb, 2017",
				"30th Jan, 2017",
				"16th Jan, 2017",
				"2nd Jan, 2017",
				"19th Dec, 2016",
				"5th Dec, 2016",
				"21st Nov, 2016",
				"7th Nov, 2016",
				"24th Oct, 2016",
				"10th Oct, 2016",
				"31st Oct, 2016",
				"3rd Oct, 2016",
				"5th Sep, 2016",
				"8th Aug, 2016",
				"11th Jul, 2016",
				"13th Jun, 2016",
				"5th Oct, 2015",
				"29th Jun, 2015",
				"19th Jan, 2015",
				"13th Oct, 2014",
				"28th Apr, 2014",
				"1st Jul, 2013",
				"28th Jan, 2013",
				"11th Jun, 2012",
				"12th Mar, 2012"
			],
			"DURATION": "4 weeks long"
		}
	},
	"progfun-422": {
		"overview": "Functional programming is becoming increasingly widespread in industry. This trend is driven by the adoption of Scala as the main programming language for many applications. Scala fuses functional and object-oriented programming in a practical package. It interoperates seamlessly with both Java and Javascript. Scala is the implementation language of many important frameworks, including Apache Spark, Kafka, and Akka. It provides the core infrastructure for sites such as Twitter, Tumblr and also Coursera.\n\nIn this course you will discover the elements of the functional programming style and learn how to apply them usefully in your daily programming tasks. You will also develop a solid foundation for reasoning about functional programs, by touching upon proofs of invariants and the tracing of execution symbolically.\n\nThe course is hands on; most units introduce short programs that serve as illustrations of important concepts and invite you to play with them, modifying and improving them. The course is complemented by a series programming projects as homework assignments.\n\nRecommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line.",
		"name": "Functional Programming Principles in Scala",
		"school": "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne",
		"provider": "Coursera",
		"link": "http://click.linksynergy.com/fs-bin/click?id=SAyYsTvLiGQ&subid=&offerid=451430.1&type=10&tmpid=18061&RD_PARM1=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fprogfun1&u1=gtc_direct",
		"categories": "Found in Computer Science, Scala",
		"subject": "cs",
		"sub-categories": "Computer Science, Scala",
		"rating": "",
		"syllabus": "Getting Started + Functions & Evaluation\n-Get up and running with Scala on your computer. Complete an example assignment to familiarize yourself with our unique way of submitting assignments. In this week, we'll learn the difference between functional imperative programming. We step through the basics of Scala; covering expressions, evaluation, conditionals, functions, and recursion\n\nHigher Order Functions\n-This week, we'll learn about functions as first-class values, and higher order functions. We'll also learn about Scala's syntax and how it's formally defined. Finally, we'll learn about methods, classes, and data abstraction through the design of a data structure for rational numbers.\n\nData and Abstraction\n-This week, we'll cover traits, and we'll learn how to organize classes into hierarchies. We'll cover the hierarchy of standard Scala types, and see how to organize classes and traits into packages. Finally, we'll touch upon the different sorts of polymorphism in Scala.\n\nTypes and Pattern Matching\n-This week we'll learn about the relationship between functions and objects in Scala; functions *are* objects! We'll zoom in on Scala's type system, covering subtyping and generics, and moving on to more advanced aspects of Scala's type system like variance. Finally, we'll cover Scala's most widely used data structure, Lists, and one of Scala's most powerful tools, pattern matching.\n\nLists\n-This week we dive into Lists, the most commonly-used data structure in Scala.\n\nCollections\n-After a deep-dive into Lists, this week we'll explore other data structures; vectors, maps, ranges, arrays, and more. We'll dive into Scala's powerful and flexible for-comprehensions for querying data.",
		"teacher": "Martin Odersky",
		"details": {
			"PROVIDER": "Coursera",
			"COST": "Free Online Course (Audit)",
			"SESSION": "In progress",
			"LANGUAGE": "English",
			"CERTIFICATE": "Paid Certificate Available",
			"EFFORT": "5-7 hours a week",
			"START DATE": [
				"21st Oct, 2019",
				"7th Oct, 2019",
				"23rd Sep, 2019",
				"9th Sep, 2019",
				"26th Aug, 2019",
				"12th Aug, 2019",
				"29th Jul, 2019",
				"15th Jul, 2019",
				"1st Jul, 2019",
				"17th Jun, 2019",
				"3rd Jun, 2019",
				"20th May, 2019",
				"6th May, 2019",
				"22nd Apr, 2019",
				"8th Apr, 2019",
				"25th Mar, 2019",
				"11th Mar, 2019",
				"25th Feb, 2019",
				"11th Feb, 2019",
				"28th Jan, 2019",
				"14th Jan, 2019",
				"31st Dec, 2018",
				"17th Dec, 2018",
				"3rd Dec, 2018",
				"19th Nov, 2018",
				"5th Nov, 2018",
				"22nd Oct, 2018",
				"8th Oct, 2018",
				"24th Sep, 2018",
				"10th Sep, 2018",
				"27th Aug, 2018",
				"13th Aug, 2018",
				"30th Jul, 2018",
				"16th Jul, 2018",
				"2nd Jul, 2018",
				"18th Jun, 2018",
				"4th Jun, 2018",
				"21st May, 2018",
				"7th May, 2018",
				"23rd Apr, 2018",
				"9th Apr, 2018",
				"26th Mar, 2018",
				"12th Mar, 2018",
				"26th Feb, 2018",
				"12th Feb, 2018",
				"29th Jan, 2018",
				"15th Jan, 2018",
				"1st Jan, 2018",
				"18th Dec, 2017",
				"4th Dec, 2017",
				"20th Nov, 2017",
				"6th Nov, 2017",
				"23rd Oct, 2017",
				"9th Oct, 2017",
				"25th Sep, 2017",
				"11th Sep, 2017",
				"28th Aug, 2017",
				"14th Aug, 2017",
				"31st Jul, 2017",
				"17th Jul, 2017",
				"3rd Jul, 2017",
				"19th Jun, 2017",
				"5th Jun, 2017",
				"22nd May, 2017",
				"8th May, 2017",
				"24th Apr, 2017",
				"10th Apr, 2017",
				"27th Mar, 2017",
				"13th Mar, 2017",
				"27th Feb, 2017",
				"13th Feb, 2017",
				"30th Jan, 2017",
				"16th Jan, 2017",
				"2nd Jan, 2017",
				"19th Dec, 2016",
				"5th Dec, 2016",
				"21st Nov, 2016",
				"7th Nov, 2016",
				"24th Oct, 2016",
				"10th Oct, 2016",
				"26th Sep, 2016",
				"12th Sep, 2016",
				"29th Aug, 2016",
				"15th Aug, 2016",
				"1st Aug, 2016",
				"18th Jul, 2016",
				"4th Jul, 2016",
				"20th Jun, 2016",
				"6th Jun, 2016",
				"23rd May, 2016",
				"15th Sep, 2014",
				"25th Apr, 2014",
				"16th Sep, 2013",
				"25th Mar, 2013",
				"18th Sep, 2012"
			],
			"DURATION": "6 weeks long"
		}
	},
	"algs4partI-339": {
		"overview": "This course covers the essential information that every serious programmer needs to know about algorithms and data structures, with emphasis on applications and scientific performance analysis of Java implementations. Part I covers elementary data structures, sorting, and searching algorithms. Part II focuses on graph- and string-processing algorithms.\n\nAll the features of this course are available for free. It does not offer a certificate upon completion.",
		"name": "Algorithms, Part I",
		"school": "Princeton University",
		"provider": "Coursera",
		"link": "http://click.linksynergy.com/fs-bin/click?id=SAyYsTvLiGQ&subid=&offerid=451430.1&type=10&tmpid=18061&RD_PARM1=https%3A%2F%2Fwww.coursera.org%2Flearn%2Falgorithms-part1&u1=gtc_direct",
		"categories": "Found in Algorithms and Data Structures",
		"subject": "cs",
		"sub-categories": "Algorithms and Data Structures",
		"rating": "",
		"syllabus": "Course Introduction\n-Welcome to Algorithms, Part I.\n\nUnion\u2212Find\n-We illustrate our basic approach to developing and analyzing algorithms by considering the dynamic connectivity problem. We introduce the union\u2212find data type and consider several implementations (quick find, quick union, weighted quick union, and weighted quick union with path compression). Finally, we apply the union\u2212find data type to the percolation problem from physical chemistry.\n\nAnalysis of Algorithms\n-The basis of our approach for analyzing the performance of algorithms is the scientific method. We begin by performing computational experiments to measure the running times of our programs. We use these measurements to develop hypotheses about performance. Next, we create mathematical models to explain their behavior. Finally, we consider analyzing the memory usage of our Java programs.\n\nStacks and Queues\n-We consider two fundamental data types for storing collections of objects: the stack and the queue. We implement each using either a singly-linked list or a resizing array. We introduce two advanced Java features\u2014generics and iterators\u2014that simplify client code. Finally, we consider various applications of stacks and queues ranging from parsing arithmetic expressions to simulating queueing systems.\n\nElementary Sorts\n-We introduce the sorting problem and Java's Comparable interface. We study two elementary sorting methods (selection sort and insertion sort) and a variation of one of them (shellsort). We also consider two algorithms for uniformly shuffling an array. We conclude with an application of sorting to computing the convex hull via the Graham scan algorithm.\n\nMergesort\n-We study the mergesort algorithm and show that it guarantees to sort any array of n items with at most n lg n compares. We also consider a nonrecursive, bottom-up version. We prove that any compare-based sorting algorithm must make at least n lg n compares in the worst case. We discuss using different orderings for the objects that we are sorting and the related concept of stability.\n\nQuicksort\n-We introduce and implement the randomized quicksort algorithm and analyze its performance. We also consider randomized quickselect, a quicksort variant which finds the kth smallest item in linear time. Finally, we consider 3-way quicksort, a variant of quicksort that works especially well in the presence of duplicate keys.\n\nPriority Queues\n-We introduce the priority queue data type and an efficient implementation using the binary heap data structure. This implementation also leads to an efficient sorting algorithm known as heapsort. We conclude with an applications of priority queues where we simulate the motion of n particles subject to the laws of elastic collision.\n\nElementary Symbol Tables\n-We define an API for symbol tables (also known as associative arrays, maps, or dictionaries) and describe two elementary implementations using a sorted array (binary search) and an unordered list (sequential search). When the keys are Comparable, we define an extended API that includes the additional methods min, max floor, ceiling, rank, and select. To develop an efficient implementation of this API, we study the binary search tree data structure and analyze its performance.\n\nBalanced Search Trees\n-In this lecture, our goal is to develop a symbol table with guaranteed logarithmic performance for search and insert (and many other operations). We begin with 2\u22123 trees, which are easy to analyze but hard to implement. Next, we consider red\u2212black binary search trees, which we view as a novel way to implement 2\u22123 trees as binary search trees. Finally, we introduce B-trees, a generalization of 2\u22123 trees that are widely used to implement file systems.\n\nGeometric Applications of BSTs\n-We start with 1d and 2d range searching, where the goal is to find all points in a given 1d or 2d interval. To accomplish this, we consider kd-trees, a natural generalization of BSTs when the keys are points in the plane (or higher dimensions). We also consider intersection problems, where the goal is to find all intersections among a set of line segments or rectangles.\n\nHash Tables\n-We begin by describing the desirable properties of hash function and how to implement them in Java, including a fundamental tenet known as the uniform hashing assumption that underlies the potential success of a hashing application. Then, we consider two strategies for implementing hash tables\u2014separate chaining and linear probing. Both strategies yield constant-time performance for search and insert under the uniform hashing assumption.\n\nSymbol Table Applications\n-We consider various applications of symbol tables including sets, dictionary clients, indexing clients, and sparse vectors.",
		"teacher": "Robert Sedgewick and Kevin Wayne",
		"details": {
			"PROVIDER": "Coursera",
			"COST": "Free Online Course (Audit)",
			"SESSION": "Upcoming",
			"LANGUAGE": "English",
			"EFFORT": "6-12 hours a week",
			"START DATE": [
				"28th Oct, 2019",
				"30th Sep, 2019",
				"2nd Sep, 2019",
				"5th Aug, 2019",
				"8th Jul, 2019",
				"10th Jun, 2019",
				"13th May, 2019",
				"15th Apr, 2019",
				"18th Mar, 2019",
				"18th Feb, 2019",
				"21st Jan, 2019",
				"24th Dec, 2018",
				"26th Nov, 2018",
				"29th Oct, 2018",
				"1st Oct, 2018",
				"3rd Sep, 2018",
				"6th Aug, 2018",
				"9th Jul, 2018",
				"11th Jun, 2018",
				"14th May, 2018",
				"16th Apr, 2018",
				"19th Mar, 2018",
				"19th Feb, 2018",
				"22nd Jan, 2018",
				"25th Dec, 2017",
				"27th Nov, 2017",
				"30th Oct, 2017",
				"2nd Oct, 2017",
				"4th Sep, 2017",
				"7th Aug, 2017",
				"10th Jul, 2017",
				"12th Jun, 2017",
				"15th May, 2017",
				"17th Apr, 2017",
				"20th Mar, 2017",
				"20th Feb, 2017",
				"23rd Jan, 2017",
				"26th Dec, 2016",
				"28th Nov, 2016",
				"31st Oct, 2016",
				"3rd Oct, 2016",
				"1st Sep, 2016",
				"22nd Jan, 2016",
				"4th Sep, 2015",
				"19th Jun, 2015",
				"23rd Jan, 2015",
				"5th Sep, 2014",
				"13th Jun, 2014",
				"31st Jan, 2014",
				"23rd Aug, 2013",
				"4th Feb, 2013",
				"12th Aug, 2012"
			],
			"DURATION": "6 weeks long"
		}
	},
	"crypto-616": {
		"overview": "Cryptography is an indispensable tool for protecting information in computer systems. In this course you will learn the inner workings of cryptographic systems and how to correctly use them in real-world applications. The course begins with a detailed discussion of how two parties who have a shared secret key can communicate securely when a powerful adversary eavesdrops and tampers with traffic. We will examine many deployed protocols and analyze mistakes in existing systems. The second half of the course discusses public-key techniques that let two parties generate a shared secret key. Throughout the course participants will be exposed to many exciting open problems in the field and work on fun (optional) programming projects. In a second course (Crypto II) we will cover more advanced cryptographic tasks such as zero-knowledge, privacy mechanisms, and other forms of encryption.",
		"name": "Cryptography I",
		"school": "Stanford University",
		"provider": "Coursera",
		"link": "http://click.linksynergy.com/fs-bin/click?id=SAyYsTvLiGQ&subid=&offerid=451430.1&type=10&tmpid=18061&RD_PARM1=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fcrypto&u1=gtc_direct",
		"categories": "Found in Cryptography, Cybersecurity",
		"subject": "cs",
		"sub-categories": "Cryptography, Cybersecurity",
		"rating": "",
		"syllabus": "Course overview and stream ciphers\n-Week 1. This week's topic is an overview of what cryptography is about as well as our first example ciphers. You will learn about pseudo-randomness and how to use it for encryption. We will also look at a few basic definitions of secure encryption.\n\nBlock Ciphers\n-Week 2. We introduce a new primitive called a block cipher that will let us build more powerful forms of encryption. We will look at a few classic block-cipher constructions (AES and 3DES) and see how to use them for encryption. Block ciphers are the work horse of cryptography and have many applications. Next week we will see how to use block ciphers to provide data integrity. The optional programming assignment this week asks students to build an encryption/decryption system using AES.\n\nMessage Integrity\n-Week 3. This week's topic is data integrity. We will discuss a number of classic constructions for MAC systems that are used to ensure data integrity. For now we only discuss how to prevent modification of non-secret data. Next week we will come back to encryption and show how to provide both confidentiality and integrity. This week's programming project shows how to authenticate large video files. Even if you don't do the project, please read the project description --- it teaches an important concept called a hash chain.\n\nAuthenticated Encryption\n-Week 4. This week's topic is authenticated encryption: encryption methods that ensure both confidentiality and integrity. We will also discuss a few odds and ends such as how to search on encrypted data. This is our last week studying symmetric encryption. Next week we start with key management and public-key cryptography. As usual there is also an extra credit programming project. This week's project involves a bit of networking to experiment with a chosen ciphertext attack on a toy web site.\n\nBasic Key Exchange\n-Week 5. This week's topic is basic key exchange: how to setup a secret key between two parties. For now we only consider protocols secure against eavesdropping. This question motivates the main concepts of public key cryptography, but before we build public-key systems we need to take a brief detour and cover a few basic concepts from computational number theory. We will start with algorithms dating back to antiquity (Euclid) and work our way up to Fermat, Euler, and Legendre. We will also mention in passing a few useful concepts from 20th century math. Next week we will put our hard work from this week to good use and construct several public key encryption systems.\n\nPublic-Key Encryption\n-Week 6. This week's topic is public key encryption: how to encrypt using a public key and decrypt using a secret key. Public key encryption is used for key management in encrypted file systems, in encrypted messaging systems, and for many other tasks. The videos cover two families of public key encryption systems: one based on trapdoor functions (RSA in particular) and the other based on the Diffie-Hellman protocol. We construct systems that are secure against tampering, also known as chosen ciphertext security (CCA security). There has been a ton of research on CCA security over the past decade and given the allotted time we can only summarize the main results from the last few years. The lectures contain suggestions for further readings for those interested in learning more about CCA secure public-key systems. The problem set this week involves a bit more math than usual, but should expand your understanding of public-key encryption. Please don't be shy about posting questions in the forum. This is the last week of this Crypto I course. I hope everyone learned a lot and enjoyed the material. Crypto is a beautiful topic with lots of open problems and room for further research. I look forward to seeing you in Crypto II where we will cover additional core topics and a few more advanced topics.\n\nFinal exam\n-Congratulations! We are at the end of the course. This module contains only the final exam which covers the entire course. I hope everyone learned a lot during these 6 weeks. Good luck on the final exam and I look forward to seeing you at a future course!",
		"teacher": "Dan Boneh",
		"details": {
			"PROVIDER": "Coursera",
			"COST": "Free Online Course (Audit)",
			"SESSION": "Upcoming",
			"LANGUAGE": "English",
			"CERTIFICATE": "Paid Certificate Available",
			"EFFORT": "5-7 hours a week",
			"START DATE": [
				"28th Oct, 2019",
				"30th Sep, 2019",
				"2nd Sep, 2019",
				"5th Aug, 2019",
				"8th Jul, 2019",
				"10th Jun, 2019",
				"13th May, 2019",
				"15th Apr, 2019",
				"18th Mar, 2019",
				"18th Feb, 2019",
				"21st Jan, 2019",
				"24th Dec, 2018",
				"26th Nov, 2018",
				"29th Oct, 2018",
				"1st Oct, 2018",
				"3rd Sep, 2018",
				"6th Aug, 2018",
				"9th Jul, 2018",
				"11th Jun, 2018",
				"14th May, 2018",
				"16th Apr, 2018",
				"19th Mar, 2018",
				"19th Feb, 2018",
				"22nd Jan, 2018",
				"25th Dec, 2017",
				"27th Nov, 2017",
				"30th Oct, 2017",
				"2nd Oct, 2017",
				"4th Sep, 2017",
				"7th Aug, 2017",
				"10th Jul, 2017",
				"12th Jun, 2017",
				"15th May, 2017",
				"17th Apr, 2017",
				"20th Mar, 2017",
				"20th Feb, 2017",
				"23rd Jan, 2017",
				"26th Dec, 2016",
				"28th Nov, 2016",
				"31st Oct, 2016",
				"3rd Oct, 2016",
				"5th Sep, 2016",
				"8th Aug, 2016",
				"11th Jul, 2016",
				"13th Jun, 2016",
				"11th Apr, 2016",
				"14th Mar, 2016",
				"16th Feb, 2016",
				"26th Oct, 2015",
				"31st Jul, 2015",
				"20th Apr, 2015",
				"5th Jan, 2015",
				"8th Sep, 2014",
				"30th Jun, 2014",
				"1st Apr, 2014",
				"6th Jan, 2014",
				"9th Sep, 2013",
				"17th Jun, 2013",
				"25th Mar, 2013",
				"14th Jan, 2013",
				"5th Nov, 2012",
				"27th Aug, 2012",
				"11th Jun, 2012",
				"12th Mar, 2012"
			],
			"DURATION": "7 weeks long"
		}
	},
	"progfun2-1186": {
		"overview": "In this course you will learn how to apply the functional programming style in the design of larger applications. You'll get to know important new functional programming concepts, from lazy evaluation to structuring your libraries using monads. We'll work on larger and more involved examples, from state space exploration to random testing to discrete circuit simulators. You\u2019ll also learn some best practices on how to write good Scala code in the real world.\n\nSeveral parts of this course deal with the question how functional programming interacts with mutable state. We will explore the consequences of combining functions and state. We will also look at purely functional alternatives to mutable state, using infinite data structures or functional reactive programming.\n\nLearning Outcomes. By the end of this course you will be able to:\n\n- recognize and apply design principles of functional programs,\n- design functional libraries and their APIs,\n- competently combine functions and state in one program,\n- understand reasoning techniques for programs that combine\nfunctions and state,\n- write simple functional reactive applications.\n\nRecommended background: You should have at least one year programming experience. Proficiency with Java or C# is ideal, but experience with other languages such as C/C++, Python, Javascript or Ruby is also sufficient. You should have some familiarity using the command line. This course is intended to be taken after Functional Programming Principles in Scala: https://www.coursera.org/learn/progfun1.",
		"name": "Functional Program Design in Scala",
		"school": "\u00c9cole Polytechnique F\u00e9d\u00e9rale de Lausanne",
		"provider": "Coursera",
		"link": "http://click.linksynergy.com/fs-bin/click?id=SAyYsTvLiGQ&subid=&offerid=451430.1&type=10&tmpid=18061&RD_PARM1=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fprogfun2&u1=gtc_direct",
		"categories": "Found in Scala, Programming Languages, Computer Science",
		"subject": "cs",
		"sub-categories": "Scala, Programming Languages, Computer Science",
		"rating": "",
		"syllabus": "For Expressions and Monads\n-We'll start by revisiting some concepts that we have learned from Principles of Functional Programming in Scala; collections, pattern matching, and functions. We'll then touch on for-comprehensions, a powerful way in Scala to traverse a list, process it, and return a new list. We'll see how to do queries with for-comprehensions as well as how the for-comprehension is \"desugared\" into calls to higher-order functions by the Scala compiler. Finally, we'll discuss what monads are, and how to verify that the monad laws are satisfied for a number of examples.\n\nLazy Evaluation\n-This week we'll revisit performance issues caused by combinatorial search, and we'll discover an important concept in functional programming that can these issues: laziness. We'll also learn a little bit about proofs on trees; in particular, we'll see how to extend structural induction to trees.\n\nFunctions and State\n-This week, we'll learn about state and side-effects. Through a rich example, we'll learn programming patterns for managing state in larger programs. We'll also learn about for-loops and while-loops in Scala.\n\nTimely Effects\n-This week we'll learn a number of important programming patterns via examples, starting with the observer pattern, and then going on to functional reactive programming. We'll learn how latency can be modeled as an effect, and how latency can be handled with Scala's monadic futures. We'll learn the important combinators on futures as well as how they can be composed to build up rich and responsive services.",
		"teacher": "Martin Odersky, Erik Meijer and Roland Kuhn",
		"details": {
			"PROVIDER": "Coursera",
			"COST": "Free Online Course (Audit)",
			"SESSION": "In progress",
			"LANGUAGE": "English",
			"CERTIFICATE": "Paid Certificate Available",
			"EFFORT": "5-7 hours a week",
			"START DATE": [
				"21st Oct, 2019",
				"7th Oct, 2019",
				"23rd Sep, 2019",
				"9th Sep, 2019",
				"26th Aug, 2019",
				"12th Aug, 2019",
				"29th Jul, 2019",
				"15th Jul, 2019",
				"1st Jul, 2019",
				"17th Jun, 2019",
				"3rd Jun, 2019",
				"20th May, 2019",
				"6th May, 2019",
				"22nd Apr, 2019",
				"8th Apr, 2019",
				"25th Mar, 2019",
				"11th Mar, 2019",
				"25th Feb, 2019",
				"11th Feb, 2019",
				"28th Jan, 2019",
				"14th Jan, 2019",
				"31st Dec, 2018",
				"17th Dec, 2018",
				"3rd Dec, 2018",
				"19th Nov, 2018",
				"5th Nov, 2018",
				"22nd Oct, 2018",
				"8th Oct, 2018",
				"24th Sep, 2018",
				"10th Sep, 2018",
				"27th Aug, 2018",
				"13th Aug, 2018",
				"30th Jul, 2018",
				"16th Jul, 2018",
				"2nd Jul, 2018",
				"18th Jun, 2018",
				"4th Jun, 2018",
				"21st May, 2018",
				"7th May, 2018",
				"23rd Apr, 2018",
				"9th Apr, 2018",
				"26th Mar, 2018",
				"12th Mar, 2018",
				"26th Feb, 2018",
				"12th Feb, 2018",
				"29th Jan, 2018",
				"15th Jan, 2018",
				"1st Jan, 2018",
				"18th Dec, 2017",
				"4th Dec, 2017",
				"20th Nov, 2017",
				"6th Nov, 2017",
				"23rd Oct, 2017",
				"9th Oct, 2017",
				"25th Sep, 2017",
				"11th Sep, 2017",
				"28th Aug, 2017",
				"14th Aug, 2017",
				"31st Jul, 2017",
				"17th Jul, 2017",
				"3rd Jul, 2017",
				"19th Jun, 2017",
				"5th Jun, 2017",
				"22nd May, 2017",
				"8th May, 2017",
				"24th Apr, 2017",
				"10th Apr, 2017",
				"27th Mar, 2017",
				"13th Mar, 2017",
				"27th Feb, 2017",
				"13th Feb, 2017",
				"30th Jan, 2017",
				"16th Jan, 2017",
				"2nd Jan, 2017",
				"19th Dec, 2016",
				"5th Dec, 2016",
				"21st Nov, 2016",
				"7th Nov, 2016",
				"24th Oct, 2016",
				"10th Oct, 2016",
				"26th Sep, 2016",
				"12th Sep, 2016",
				"29th Aug, 2016",
				"15th Aug, 2016",
				"1st Aug, 2016",
				"18th Jul, 2016",
				"4th Jul, 2016",
				"20th Jun, 2016",
				"23rd May, 2016",
				"13th Apr, 2015",
				"4th Nov, 2013"
			],
			"DURATION": "4 weeks long"
		}
	}
}
